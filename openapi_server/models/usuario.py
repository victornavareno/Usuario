from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.usuario_perfiles_inner import UsuarioPerfilesInner
from openapi_server import util

from openapi_server.models.usuario_perfiles_inner import UsuarioPerfilesInner  # noqa: E501

class Usuario(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_usuario=None, email=None, contrasea=None, metodo_pago=None, status=None, perfiles=None):  # noqa: E501
        """Usuario - a model defined in OpenAPI

        :param id_usuario: The id_usuario of this Usuario.  # noqa: E501
        :type id_usuario: int
        :param email: The email of this Usuario.  # noqa: E501
        :type email: str
        :param contrasea: The contrasea of this Usuario.  # noqa: E501
        :type contrasea: str
        :param metodo_pago: The metodo_pago of this Usuario.  # noqa: E501
        :type metodo_pago: str
        :param status: The status of this Usuario.  # noqa: E501
        :type status: str
        :param perfiles: The perfiles of this Usuario.  # noqa: E501
        :type perfiles: List[UsuarioPerfilesInner]
        """
        self.openapi_types = {
            'id_usuario': int,
            'email': str,
            'contrasea': str,
            'metodo_pago': str,
            'status': str,
            'perfiles': List[UsuarioPerfilesInner]
        }

        self.attribute_map = {
            'id_usuario': 'idUsuario',
            'email': 'email',
            'contrasea': 'contraseña',
            'metodo_pago': 'metodoPago',
            'status': 'status',
            'perfiles': 'perfiles'
        }

        self._id_usuario = id_usuario
        self._email = email
        self._contrasea = contrasea
        self._metodo_pago = metodo_pago
        self._status = status
        self._perfiles = perfiles

    @classmethod
    def from_dict(cls, dikt) -> 'Usuario':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Usuario of this Usuario.  # noqa: E501
        :rtype: Usuario
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_usuario(self) -> int:
        """Gets the id_usuario of this Usuario.

        Identificador único del contenido  # noqa: E501

        :return: The id_usuario of this Usuario.
        :rtype: int
        """
        return self._id_usuario

    @id_usuario.setter
    def id_usuario(self, id_usuario: int):
        """Sets the id_usuario of this Usuario.

        Identificador único del contenido  # noqa: E501

        :param id_usuario: The id_usuario of this Usuario.
        :type id_usuario: int
        """

        self._id_usuario = id_usuario

    @property
    def email(self) -> str:
        """Gets the email of this Usuario.


        :return: The email of this Usuario.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Usuario.


        :param email: The email of this Usuario.
        :type email: str
        """

        self._email = email

    @property
    def contrasea(self) -> str:
        """Gets the contrasea of this Usuario.


        :return: The contrasea of this Usuario.
        :rtype: str
        """
        return self._contrasea

    @contrasea.setter
    def contrasea(self, contrasea: str):
        """Sets the contrasea of this Usuario.


        :param contrasea: The contrasea of this Usuario.
        :type contrasea: str
        """

        self._contrasea = contrasea

    @property
    def metodo_pago(self) -> str:
        """Gets the metodo_pago of this Usuario.


        :return: The metodo_pago of this Usuario.
        :rtype: str
        """
        return self._metodo_pago

    @metodo_pago.setter
    def metodo_pago(self, metodo_pago: str):
        """Sets the metodo_pago of this Usuario.


        :param metodo_pago: The metodo_pago of this Usuario.
        :type metodo_pago: str
        """
        allowed_values = ["tarjeta de credito", "tarjeta virtual", "tarjeta prepago", "paypal"]  # noqa: E501
        if metodo_pago not in allowed_values:
            raise ValueError(
                "Invalid value for `metodo_pago` ({0}), must be one of {1}"
                .format(metodo_pago, allowed_values)
            )

        self._metodo_pago = metodo_pago

    @property
    def status(self) -> str:
        """Gets the status of this Usuario.


        :return: The status of this Usuario.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Usuario.


        :param status: The status of this Usuario.
        :type status: str
        """
        allowed_values = ["activo", "en suspensión"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def perfiles(self) -> List[UsuarioPerfilesInner]:
        """Gets the perfiles of this Usuario.

        Perfiles dentro de una misma cuenta  # noqa: E501

        :return: The perfiles of this Usuario.
        :rtype: List[UsuarioPerfilesInner]
        """
        return self._perfiles

    @perfiles.setter
    def perfiles(self, perfiles: List[UsuarioPerfilesInner]):
        """Sets the perfiles of this Usuario.

        Perfiles dentro de una misma cuenta  # noqa: E501

        :param perfiles: The perfiles of this Usuario.
        :type perfiles: List[UsuarioPerfilesInner]
        """

        self._perfiles = perfiles
